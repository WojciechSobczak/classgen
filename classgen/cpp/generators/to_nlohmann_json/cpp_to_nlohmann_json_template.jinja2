{% set CONVERTER_SUFFIX = "_converter" %}

{% macro value_to_json(field_type, field_name, this = True) %}
    {% set this = "this->" if this == True else "" %}
    {% if is_numerical(field_type) or is_string(field_type) or is_string_view(field_type) %}
        {{this}}{{field_name}}
    {% elif is_str_or_class(field_type) %}
        {{this}}{{field_name}}.{{function_name}}()
    {% elif is_bool(field_type) %}
        {{this}}{{field_name}}
    {% elif is_map(field_type) or is_set(field_type) %}
        {{field_name}}{{CONVERTER_SUFFIX}}({{field_name}})
    {% elif is_user_defined(field_type) %}
        {{field_name}}.{{function_name}}()
    {% else %}
        NON IMPLEMENTED FIELD IN TO STRING GENERATOR
    {% endif %}
{% endmacro %}
{##}
{##}
{##}
{##}
{% macro generate_templated_type_converter_lambda(field_type, field_name) %}
{% if is_map(field_type) %}
{{generate_map_converter_lambda(field_type, field_name)|trim}}
{% elif is_set(field_type) %}
{{generate_set_converter_lambda(field_type, field_name)|trim}}
{% else %}
NON IMPLEMENTED FIELD IN TO TEMPLATE TO STRING GENERATOR
{% endif %}
{% endmacro %}
{##}
{##}
{##}
{##}
{% macro generate_map_converter_lambda(map_type, converter_prefix) %}
constexpr auto {{converter_prefix}}{{CONVERTER_SUFFIX}} = []({{format_field_type(map_type)}} map_arg_name) -> nlohmann::json {
    {##}
    {% if is_templated(map_type.value_type) %}
    {{generate_templated_type_converter_lambda(map_type.value_type, "value")|indent(4, False)}}
    {% endif %}
    {##}
    nlohmann::json json = nlohmann::json::object();
    for (const auto& [key, value] : map_arg_name) {
        json[key] = {{value_to_json(map_type.value_type, 'value', False)|trim}};
    }
    return json;
};
{% endmacro %}
{##}
{##}
{##}
{##}
{% macro generate_set_converter_lambda(set_type, converter_prefix) %}
constexpr auto {{converter_prefix}}{{CONVERTER_SUFFIX}} = []({{format_field_type(set_type)}} set_arg_name) -> nlohmann::json {
    {% if is_templated(set_type.value_type) %}
    {{generate_templated_type_converter_lambda(set_type.value_type, "value")|indent(4, False)}}
    {% endif %}

    nlohmann::json json = nlohmann::json::array();
    for (const auto& value : set_arg_name) {
        json.push_back({{value_to_json(set_type.value_type, 'value', False)|trim}});
    }
    return json;
};
{% endmacro %}
{##}
{##}
{##}
{##}
nlohmann::json {{function_name}}() const {
    {% for field in templated_fields %}
    {{generate_templated_type_converter_lambda(field.type, field.name)|indent(4)|trim}}

    {% endfor %}
    nlohmann::json json = nlohmann::json::object();
    {% for field in all_fields if not field.static %}
    json["{{field.name}}"] = {{value_to_json(field.type, field.name)|trim}};
    {% endfor %}
    return json;
}