{%- macro value_to_json(field_type, field_name, this = True) -%}
    {% set this = "this->" if this == True else "" %}
    {%- if is_numerical(field_type) or is_string(field_type) or is_string_view(field_type) -%}
        {{this}}{{field_name}}
    {%- elif is_str_or_class(field_type) -%}
        {{this}}{{field_name}}.{{function_name}}()
    {%- elif is_bool(field_type) -%}
        {{this}}{{field_name}}
    {%- elif is_map(field_type) or is_set(field_type) -%}
        {{field_name}}
    {%- elif is_user_defined(field_type) -%}
        {{field_name}}.{{function_name}}()
    {%- else -%}
        NON IMPLEMENTED FIELD IN TO STRING GENERATOR
    {%- endif -%}
{%- endmacro -%}

{%- macro generate_templated_type_lambda(field_type, field_name) -%}
    {%- if is_map(field_type) -%}
        {{map_to_lambda(field_type, field_name)}}
    {%- elif is_set(field_type) -%}
        {{set_to_lambda(field_type, field_name)}}
    {%- else -%}
        NON IMPLEMENTED FIELD IN TO TEMPLATE TO STRING GENERATOR
    {%- endif -%}
{%- endmacro -%}

{%- macro map_to_lambda(map_type, map_name) -%}
[this]() -> nlohmann::json {
    nlohmann::json json;
    for (const auto& [key, value] : this->{{map_name}}) {
        json[key] = {{value_to_json(map_type.value_type, 'value', False)}};
    }
    return json;
}()
{%- endmacro -%}

{%- macro set_to_lambda(set_type, set_name) -%}
[this]() -> nlohmann::json {
    nlohmann::json json = nlohmann::json::array();
    for (const auto& value : this->{{set_name}}) {
        json.push_back(value);
    }
    return json;
}()
{%- endmacro -%}


nlohmann::json {{function_name}}() const {

    {%- for field in templated_fields %}
    nlohmann::json {{field.name}} = {{generate_templated_type_lambda(field.type, field.name)|indent(4)}};
    {% endfor %}

    nlohmann::json json;
    {% for field in all_fields if not field.static -%}
    json["{{field.name}}"] = {{value_to_json(field.type, field.name)}};
    {% endfor -%}
    return json;
}