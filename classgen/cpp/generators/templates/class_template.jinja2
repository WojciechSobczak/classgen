{% macro paste_includes(includes, begin_char, end_char) %}
{% for include in includes %}
#include {{begin_char}}{{include}}{{end_char}}
{% endfor %}
{% endmacro %}
{##}
{{ paste_includes(fragments.dependencies.quoted_includes, '"', '"') }}
{{ paste_includes(fragments.dependencies.libraries_includes, '<', '>') }}
{{ paste_includes(fragments.dependencies.standard_includes, '<', '>') -}}
{##}
{##}
{##}
{% macro paste_fragments_codes(codes) %}
{% if codes|length > 0 %}
{% for code in codes -%}
   {{code}}

{% endfor %}
{% endif %}
{% endmacro %}

{{ paste_fragments_codes(fragments.before_namespace_fragments) }}

{##}
{##}
{##}
{% macro generate_fields_code(fields) %}
{% for field in fields %}
    {% set static = "static " if field.static else "" %}
    {% set const = "const " if field.const else "" %}
    {% set constexpr = "constexpr " if field.constexpr else "" %}
    {% set type = format_field_type(field.type) %}
    {% set init = (" = " ~ get_field_value_formatted(field.value)) if field.value is not none else "" %}
    {{constexpr}}{{static}}{{const}}{{type}} {{field.name}}{{init}};
{% endfor %}
{% endmacro %}
{##}
{##}
{##}
{% macro generate_fields_block(fields, modifier) %}
{% if fields|length > 0 %}
{{modifier}}:
{{generate_fields_code(fields)}}
{% endif %}
{% endmacro %}
{##}
{##}
{##}

{% if namespace|length > 0 %}
namespace {{namespace}} {
{% endif %}

{{ paste_fragments_codes(fragments.after_namespace_before_class_fragments) }}
{##}
{##}
{##}
class {{class_name}} 
{
{{ generate_fields_block(fields.public_fields, "public") -}}
{{ generate_fields_block(fields.protected_fields, "protected") -}}
{{ generate_fields_block(fields.private_fields, "private") -}}

public:

{{paste_fragments_codes(fragments.in_class_fragments)|indent(4, True) -}}
};

{{paste_fragments_codes(fragments.out_class_in_namespace_fragments) }}

{%- if namespace|length > 0 -%}
}
{%- endif %}


{{paste_fragments_codes(fragments.out_namespace_fragments)}}