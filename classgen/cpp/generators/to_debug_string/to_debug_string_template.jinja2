{% set CONVERTER_SUFFIX = "_converter" %}
{##}
{##}
{% macro value_to_sstream_input(field_type, field_name, this = False) %}
    {% set this = "this->" if this == True else "" %}
    {% set this_field = this + field_name %}
    {##}
    {% if is_numerical(field_type) %}
        {% if is_floating_point(field_type) %}
            classgen::to_string({{this_field}})
        {% else %}
        {{this_field}}
        {% endif %}
    {% elif is_string(field_type) %}
        "\"" << {{this_field}} << "\""
    {% elif is_bool(field_type) %}
        classgen::to_string({{this_field}})
    {% elif is_str_or_class(field_type) %}
        {{this_field}}.{{function_name}}()
    {% elif is_string_view(field_type) %}
        "\"" << {{this_field}} << "\""
    {% elif is_user_defined(field_type) %}
        {{this_field}}.{{function_name}}(indent_size, false, depth + 1)
    {% else %}
        NON IMPLEMENTED FIELD IN TO STRING GENERATOR
    {% endif %}
{% endmacro %}
{##}
{##}
{##}
{##}
{% macro generate_map_converter_lambda(map_type, lambda_prefix, indent) %}
constexpr auto {{lambda_prefix}}{{CONVERTER_SUFFIX}} = [](const std::string_view current_indent, const size_t indent_size, const {{format_field_type(map_type)}}& map_arg_name, std::stringstream& result) {
    const std::string indent = std::string(current_indent) + std::string(indent_size, ' ');
    result << "{\n";
    size_t loop_index = 0;
    {##}
    {% if is_templated(map_type.key_type) %}
    {{generate_templated_type_converter_lambda(map_type.key_type, "key")|indent(indent + 4, False)}}
    {% endif %}
    {##}
    {% if is_templated(map_type.value_type) %}
    {{generate_templated_type_converter_lambda(map_type.value_type, "value")|indent(indent + 4, False)}}
    {% endif %}
    {##}
    for (const auto& [key, value] : map_arg_name) {
        {##}
        {% if is_templated(map_type.key_type) %}
        key{{CONVERTER_SUFFIX}}(indent, indent_size, key, result);
        {% else %}
        result << indent << {{value_to_sstream_input(map_type.key_type, 'key')|indent(indent + 4)|trim}};
        {% endif %}
        result << " : ";
        {% if is_templated(map_type.value_type) %}
        value{{CONVERTER_SUFFIX}}(indent, indent_size, key, result);
        {% else  %}
        result << {{value_to_sstream_input(map_type.value_type, 'value')|indent(indent + 4)|trim}};
        {% endif %}
        {##}
        if (loop_index++ != map_arg_name.size() - 1) {
            result << ",\n";
        } else {
            result << "\n";
        }
    }
    result << current_indent;
    result << "}";
    return result.str();
};
{% endmacro %}
{##}
{##}
{##}
{##}
{##}
{% macro set_to_lambda(set_type, set_name, indent) %}
constexpr auto {{set_name}}{{CONVERTER_SUFFIX}} = [](const std::string_view current_indent, const size_t indent_size, const {{format_field_type(set_type)}}& set_arg_name, std::stringstream& result, const bool with_type = true) -> std::string {
    const std::string indent = std::string(current_indent) + std::string(indent_size, ' ');

    {% if is_templated(set_type.value_type) %}
    {{generate_templated_type_converter_lambda(set_type.value_type, "value", indent)|indent(indent, False)}}
    {% endif %}

    if (with_type == true) {
        result << "{{format_field_type(set_type)}} = [\n";
    } else {
        result << current_indent << "[\n";
    }
    size_t loop_index = 0;
    for (const auto& value : set_arg_name) {
        {% if is_templated(set_type.value_type) %}
        value{{CONVERTER_SUFFIX}}(indent, indent_size, value, result, false);
        {% else  %}
        result << indent << {{value_to_sstream_input(set_type.value_type, 'value')|indent(indent)|trim}};
        {% endif %}
        if (loop_index++ != set_arg_name.size() - 1) {
            result << ",\n";
        } else {
            result << "\n";
        }
    }
    result << current_indent;
    result << "]";
    return result.str();
};
{% endmacro %}
{##}
{##}
{##}
{% macro generate_templated_type_converter_lambda(templated_type, converter_var_name_prefix, indent) %}
{% if is_map(templated_type) %}
{{generate_map_converter_lambda(templated_type, converter_var_name_prefix, indent)|trim}}
{% elif is_set(templated_type) %}
{{set_to_lambda(templated_type, converter_var_name_prefix, indent)|trim}}
{% else %}
NON IMPLEMENTED FIELD IN generate_templated_type_converter_lambda
{% endif %}
{% endmacro %}
{##}
{##}
{##}
{##}
std::string {{function_name}}(const size_t indent_size = {{default_indent_size}}, const bool with_class_name = true, const size_t depth = 0) const {
    const std::string indent(indent_size + (depth * indent_size), ' ');

    {% for field in all_fields if not field.static and is_templated(field.type) %}
    {{generate_templated_type_converter_lambda(field.type, field.name, 4)|indent(4, False)}}
    {% endfor %}

    std::stringstream result;
    if (with_class_name == true) {
        result << "{{class_name}}: ";
    }
    result << "{\n";
    {% for field in all_fields if not field.static %}
    
    {% if is_templated(field.type) %}
    result << indent << "{{field.name}}: ";
    {{field.name}}{{CONVERTER_SUFFIX}}(indent, indent_size, this->{{field.name}}, result);
    {% else %}
    result << indent << "{{field.name}}: {{format_field_type(field.type)}} = ";
    result << {{ value_to_sstream_input(field.type, field.name, not is_templated(field.type))|indent(4)|trim }};
    {% endif %}
    {% if loop.revindex0 != 0 %}
    result << ",\n";
    {% else %}
    result << "\n";
    {% endif %}
    {% endfor %}
    result << std::string(indent_size * depth, ' ') << "}";
    return result.str();
}